// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/018bf/companies/internal/domain/usecases (interfaces: EventUseCase)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/companies/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockEventUseCase is a mock of EventUseCase interface.
type MockEventUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUseCaseMockRecorder
}

// MockEventUseCaseMockRecorder is the mock recorder for MockEventUseCase.
type MockEventUseCaseMockRecorder struct {
	mock *MockEventUseCase
}

// NewMockEventUseCase creates a new mock instance.
func NewMockEventUseCase(ctrl *gomock.Controller) *MockEventUseCase {
	mock := &MockEventUseCase{ctrl: ctrl}
	mock.recorder = &MockEventUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUseCase) EXPECT() *MockEventUseCaseMockRecorder {
	return m.recorder
}

// CompanyCreated mocks base method.
func (m *MockEventUseCase) CompanyCreated(arg0 context.Context, arg1 *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyCreated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyCreated indicates an expected call of CompanyCreated.
func (mr *MockEventUseCaseMockRecorder) CompanyCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyCreated", reflect.TypeOf((*MockEventUseCase)(nil).CompanyCreated), arg0, arg1)
}

// CompanyDeleted mocks base method.
func (m *MockEventUseCase) CompanyDeleted(arg0 context.Context, arg1 *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyDeleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyDeleted indicates an expected call of CompanyDeleted.
func (mr *MockEventUseCaseMockRecorder) CompanyDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyDeleted", reflect.TypeOf((*MockEventUseCase)(nil).CompanyDeleted), arg0, arg1)
}

// CompanyUpdated mocks base method.
func (m *MockEventUseCase) CompanyUpdated(arg0 context.Context, arg1 *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyUpdated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyUpdated indicates an expected call of CompanyUpdated.
func (mr *MockEventUseCaseMockRecorder) CompanyUpdated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyUpdated", reflect.TypeOf((*MockEventUseCase)(nil).CompanyUpdated), arg0, arg1)
}
