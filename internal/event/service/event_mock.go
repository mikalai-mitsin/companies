// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package usecases is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/companies/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockeventRepository is a mock of eventRepository interface.
type MockeventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockeventRepositoryMockRecorder
}

// MockeventRepositoryMockRecorder is the mock recorder for MockeventRepository.
type MockeventRepositoryMockRecorder struct {
	mock *MockeventRepository
}

// NewMockeventRepository creates a new mock instance.
func NewMockeventRepository(ctrl *gomock.Controller) *MockeventRepository {
	mock := &MockeventRepository{ctrl: ctrl}
	mock.recorder = &MockeventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventRepository) EXPECT() *MockeventRepositoryMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockeventRepository) Send(ctx context.Context, event *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockeventRepositoryMockRecorder) Send(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockeventRepository)(nil).Send), ctx, event)
}
