// Code generated by MockGen. DO NOT EDIT.
// Source: company.go

// Package interceptors is a generated GoMock package.
package interceptor

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/companies/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// HasObjectPermission mocks base method.
func (m *MockauthService) HasObjectPermission(ctx context.Context, token *models.Token, permission models.PermissionID, object any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasObjectPermission", ctx, token, permission, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasObjectPermission indicates an expected call of HasObjectPermission.
func (mr *MockauthServiceMockRecorder) HasObjectPermission(ctx, token, permission, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasObjectPermission", reflect.TypeOf((*MockauthService)(nil).HasObjectPermission), ctx, token, permission, object)
}

// HasPermission mocks base method.
func (m *MockauthService) HasPermission(ctx context.Context, token *models.Token, permission models.PermissionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", ctx, token, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockauthServiceMockRecorder) HasPermission(ctx, token, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockauthService)(nil).HasPermission), ctx, token, permission)
}

// MockcompanyService is a mock of companyService interface.
type MockcompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockcompanyServiceMockRecorder
}

// MockcompanyServiceMockRecorder is the mock recorder for MockcompanyService.
type MockcompanyServiceMockRecorder struct {
	mock *MockcompanyService
}

// NewMockcompanyService creates a new mock instance.
func NewMockcompanyService(ctrl *gomock.Controller) *MockcompanyService {
	mock := &MockcompanyService{ctrl: ctrl}
	mock.recorder = &MockcompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompanyService) EXPECT() *MockcompanyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcompanyService) Create(ctx context.Context, create *models.CompanyCreate) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcompanyServiceMockRecorder) Create(ctx, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcompanyService)(nil).Create), ctx, create)
}

// Delete mocks base method.
func (m *MockcompanyService) Delete(ctx context.Context, id models.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockcompanyServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcompanyService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockcompanyService) Get(ctx context.Context, id models.UUID) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcompanyServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcompanyService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockcompanyService) List(ctx context.Context, filter *models.CompanyFilter) ([]*models.Company, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockcompanyServiceMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcompanyService)(nil).List), ctx, filter)
}

// Update mocks base method.
func (m *MockcompanyService) Update(ctx context.Context, update *models.CompanyUpdate) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, update)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockcompanyServiceMockRecorder) Update(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcompanyService)(nil).Update), ctx, update)
}

// MockeventService is a mock of eventService interface.
type MockeventService struct {
	ctrl     *gomock.Controller
	recorder *MockeventServiceMockRecorder
}

// MockeventServiceMockRecorder is the mock recorder for MockeventService.
type MockeventServiceMockRecorder struct {
	mock *MockeventService
}

// NewMockeventService creates a new mock instance.
func NewMockeventService(ctrl *gomock.Controller) *MockeventService {
	mock := &MockeventService{ctrl: ctrl}
	mock.recorder = &MockeventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventService) EXPECT() *MockeventServiceMockRecorder {
	return m.recorder
}

// CompanyCreated mocks base method.
func (m *MockeventService) CompanyCreated(ctx context.Context, company *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyCreated", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyCreated indicates an expected call of CompanyCreated.
func (mr *MockeventServiceMockRecorder) CompanyCreated(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyCreated", reflect.TypeOf((*MockeventService)(nil).CompanyCreated), ctx, company)
}

// CompanyDeleted mocks base method.
func (m *MockeventService) CompanyDeleted(ctx context.Context, company *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyDeleted", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyDeleted indicates an expected call of CompanyDeleted.
func (mr *MockeventServiceMockRecorder) CompanyDeleted(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyDeleted", reflect.TypeOf((*MockeventService)(nil).CompanyDeleted), ctx, company)
}

// CompanyUpdated mocks base method.
func (m *MockeventService) CompanyUpdated(ctx context.Context, company *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyUpdated", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompanyUpdated indicates an expected call of CompanyUpdated.
func (mr *MockeventServiceMockRecorder) CompanyUpdated(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyUpdated", reflect.TypeOf((*MockeventService)(nil).CompanyUpdated), ctx, company)
}
