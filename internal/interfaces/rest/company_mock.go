// Code generated by MockGen. DO NOT EDIT.
// Source: company.go

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/companies/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockcompanyInterceptor is a mock of companyInterceptor interface.
type MockcompanyInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockcompanyInterceptorMockRecorder
}

// MockcompanyInterceptorMockRecorder is the mock recorder for MockcompanyInterceptor.
type MockcompanyInterceptorMockRecorder struct {
	mock *MockcompanyInterceptor
}

// NewMockcompanyInterceptor creates a new mock instance.
func NewMockcompanyInterceptor(ctrl *gomock.Controller) *MockcompanyInterceptor {
	mock := &MockcompanyInterceptor{ctrl: ctrl}
	mock.recorder = &MockcompanyInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompanyInterceptor) EXPECT() *MockcompanyInterceptorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcompanyInterceptor) Create(ctx context.Context, create *models.CompanyCreate, token *models.Token) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create, token)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcompanyInterceptorMockRecorder) Create(ctx, create, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcompanyInterceptor)(nil).Create), ctx, create, token)
}

// Delete mocks base method.
func (m *MockcompanyInterceptor) Delete(ctx context.Context, id models.UUID, token *models.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockcompanyInterceptorMockRecorder) Delete(ctx, id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcompanyInterceptor)(nil).Delete), ctx, id, token)
}

// Get mocks base method.
func (m *MockcompanyInterceptor) Get(ctx context.Context, id models.UUID, token *models.Token) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, token)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcompanyInterceptorMockRecorder) Get(ctx, id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcompanyInterceptor)(nil).Get), ctx, id, token)
}

// List mocks base method.
func (m *MockcompanyInterceptor) List(ctx context.Context, filter *models.CompanyFilter, token *models.Token) ([]*models.Company, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, token)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockcompanyInterceptorMockRecorder) List(ctx, filter, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcompanyInterceptor)(nil).List), ctx, filter, token)
}

// Update mocks base method.
func (m *MockcompanyInterceptor) Update(ctx context.Context, update *models.CompanyUpdate, token *models.Token) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, update, token)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockcompanyInterceptorMockRecorder) Update(ctx, update, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcompanyInterceptor)(nil).Update), ctx, update, token)
}
