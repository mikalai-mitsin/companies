// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package interceptors is a generated GoMock package.
package interceptor

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/companies/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// HasObjectPermission mocks base method.
func (m *MockauthService) HasObjectPermission(ctx context.Context, token *models.Token, permission models.PermissionID, object any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasObjectPermission", ctx, token, permission, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasObjectPermission indicates an expected call of HasObjectPermission.
func (mr *MockauthServiceMockRecorder) HasObjectPermission(ctx, token, permission, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasObjectPermission", reflect.TypeOf((*MockauthService)(nil).HasObjectPermission), ctx, token, permission, object)
}

// HasPermission mocks base method.
func (m *MockauthService) HasPermission(ctx context.Context, token *models.Token, permission models.PermissionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", ctx, token, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockauthServiceMockRecorder) HasPermission(ctx, token, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockauthService)(nil).HasPermission), ctx, token, permission)
}

// ValidateToken mocks base method.
func (m *MockauthService) ValidateToken(ctx context.Context, access *models.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockauthServiceMockRecorder) ValidateToken(ctx, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockauthService)(nil).ValidateToken), ctx, access)
}
